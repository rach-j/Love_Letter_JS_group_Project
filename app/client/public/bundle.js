/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./client/src/runner.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./client/src/helpers/setup.js":
/*!*************************************!*\
  !*** ./client/src/helpers/setup.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Deck = __webpack_require__(/*! ../models/deck.js */ \"./client/src/models/deck.js\")\r\nconst Player = __webpack_require__(/*! ../models/player.js */ \"./client/src/models/player.js\")\r\n\r\nconst SetUpHelper = {}\r\n\r\nSetUpHelper.setUpDeck = function (onComplete) {\r\n  const deck = new Deck();\r\n  deck.getDeckData(() => {\r\n    deck.formDeck();\r\n    deck.shuffleDeck();\r\n    onComplete(deck);\r\n  })\r\n}\r\n\r\n\r\nSetUpHelper.setUpPlayers = function (deck, gameView) {\r\n  const player1 = new Player(gameView.getPlayerName(1), 1);\r\n  const player2 = new Player(gameView.getPlayerName(2), 2);\r\n  const player3 = new Player(gameView.getPlayerName(3), 3);\r\n  const player4 = new Player(gameView.getPlayerName(4), 4);\r\n\r\n  player1.card = deck.drawCard();\r\n  player2.card = deck.drawCard();\r\n  player3.card = deck.drawCard();\r\n  player4.card = deck.drawCard();\r\n  return [player1, player2, player3, player4];\r\n}\r\n\r\n\r\nmodule.exports = SetUpHelper\r\n\n\n//# sourceURL=webpack:///./client/src/helpers/setup.js?");

/***/ }),

/***/ "./client/src/models/deck.js":
/*!***********************************!*\
  !*** ./client/src/models/deck.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const DeckRequest = __webpack_require__(/*! ../services/request.js */ \"./client/src/services/request.js\");\r\n\r\nconst Deck = function() {\r\n  this.apiDeckInfo = {};\r\n  this.cardDeck = [];\r\n  this.counter = 0;\r\n  this.noCardsLeft = false;\r\n  this.cardActions = [];\r\n  this.initialRemovedCard = null;\r\n\r\n  const guard = function (holderPlayer, gameView, playerArray, endOfGoFunctions) {\r\n    gameView.askForPlayerChoiceGuard(holderPlayer, playerArray, endOfGoFunctions);\r\n  }\r\n\r\n  const priest = function (holderPlayer, gameView, playerArray, endOfGoFunctions) {\r\n    gameView.askForPlayerChoicePriest(holderPlayer, playerArray, endOfGoFunctions);\r\n  }\r\n\r\n  const baron = function (holderPlayer, gameView, playerArray, endOfGoFunctions) {\r\n    gameView.askForPlayerChoiceBaron(holderPlayer, playerArray, endOfGoFunctions);\r\n  }\r\n\r\n  const handmaid = function (holderPlayer, gameView, playerArray, endOfGoFunctions) {\r\n    gameView.askForPlayerChoiceHandmaid(holderPlayer, playerArray, endOfGoFunctions);\r\n  }\r\n\r\n  const prince = function (holderPlayer, gameView, playerArray, endOfGoFunctions, deck) {\r\n    gameView.askForPlayerChoicePrince(holderPlayer, playerArray, endOfGoFunctions, deck);\r\n  }\r\n\r\n  const king = function (holderPlayer, gameView, playerArray, endOfGoFunctions) {\r\n    gameView.askForPlayerChoiceKing(holderPlayer, playerArray, endOfGoFunctions);\r\n  }\r\n\r\n  const countess = function (holderPlayer, gameView, playerArray, endOfGoFunctions) {\r\n    gameView.askForPlayerChoiceCountess(holderPlayer, playerArray, endOfGoFunctions);\r\n  }\r\n\r\n  const princess = function (holderPlayer, gameView, playerArray, endOfGoFunctions) {\r\n    gameView.askForPlayerChoicePrincess(holderPlayer, playerArray, endOfGoFunctions);\r\n  }\r\n\r\n  this.cardActions.push(guard);\r\n  this.cardActions.push(priest);\r\n  this.cardActions.push(baron);\r\n  this.cardActions.push(handmaid);\r\n  this.cardActions.push(prince);\r\n  this.cardActions.push(king);\r\n  this.cardActions.push(countess);\r\n  this.cardActions.push(princess);\r\n} // end Deck constructor\r\n\r\n\r\nDeck.prototype.getDeckData = function (gotCardData) {\r\n  const deckRequest = new DeckRequest('http://localhost:3000/data4players');\r\n\r\n  const getDataRequestComplete = ((cardData) => {\r\n    cardData.forEach((card) => {\r\n      this.apiDeckInfo[card.character] = card;\r\n    });\r\n    gotCardData();\r\n  }) // end getDataRequestComplete callback function\r\n\r\n  deckRequest.get(getDataRequestComplete);\r\n}\r\n\r\n\r\nDeck.prototype.formDeck = function(){\r\n  for (let i = 1; i < 6; i++){\r\n    this.cardDeck.push(this.apiDeckInfo.Guard);\r\n  }\r\n  for (let i = 1; i < 3; i++){\r\n    this.cardDeck.push(this.apiDeckInfo.Priest); //priest\r\n    this.cardDeck.push(this.apiDeckInfo.Baron); // baron\r\n    this.cardDeck.push(this.apiDeckInfo.Handmaid);\r\n    this.cardDeck.push(this.apiDeckInfo.Prince);\r\n  }\r\n  this.cardDeck.push(this.apiDeckInfo.King);\r\n  this.cardDeck.push(this.apiDeckInfo.Countess);\r\n  this.cardDeck.push(this.apiDeckInfo.Princess);\r\n}\r\n\r\n\r\nDeck.prototype.shuffleDeck = function () {\r\n  let currentIndex =  this.cardDeck.length;\r\n  let temporaryValue = 0;\r\n  let randomIndex = 0;\r\n  while (0!== currentIndex) {\r\n    randomIndex = Math.floor(Math.random()*currentIndex);\r\n    currentIndex -= 1;\r\n    temporaryValue = this.cardDeck[currentIndex];\r\n    this.cardDeck[currentIndex] = this.cardDeck[randomIndex];\r\n    this.cardDeck[randomIndex] = temporaryValue;\r\n  }\r\n}\r\n\r\n\r\nDeck.prototype.drawCard = function () {\r\n  const cardToReturn = this.cardDeck[this.counter]\r\n  this.counter += 1;\r\n  if(this.counter === this.cardDeck.length) {\r\n    this.noCardsLeft = true;\r\n  }\r\n  return cardToReturn;\r\n}\r\n\r\n\r\nDeck.prototype.removeInitialCard = function() {\r\n  this.initialRemovedCard = this.drawCard();\r\n}\r\n\r\n\r\nmodule.exports = Deck;\r\n\n\n//# sourceURL=webpack:///./client/src/models/deck.js?");

/***/ }),

/***/ "./client/src/models/player.js":
/*!*************************************!*\
  !*** ./client/src/models/player.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const Player = function(name, playerNumber){\r\n  this.name = name;\r\n  this.card = null;\r\n  this.aliveStatus = true;\r\n  this.protected = false;\r\n  this.playerNumber = playerNumber;\r\n}\r\n\r\n\r\nmodule.exports = Player;\r\n\n\n//# sourceURL=webpack:///./client/src/models/player.js?");

/***/ }),

/***/ "./client/src/models/turn.js":
/*!***********************************!*\
  !*** ./client/src/models/turn.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const Turn = function (activePlayer, gameView, deck, playerArray) {\r\n  this.secondCard = null;\r\n  this.activePlayer = activePlayer;\r\n  this.playerNumber = activePlayer.playerNumber;\r\n  this.activePlayer.protected = false;\r\n  this.gameView = gameView;\r\n  this.deck = deck;\r\n  this.playerArray = playerArray;\r\n  this.handCardNotUsed = true;\r\n  this.deckCardNotUsed = true;\r\n}\r\n\r\n\r\nTurn.prototype.playerIsActive = function (gameView) {\r\n  if(this.activePlayer.aliveStatus){\r\n    const messagebox = document.getElementById(\"message-box\");\r\n    messagebox.innerHTML = `Your turn ${this.activePlayer.name} </br> Choose the card your wish to play!`;\r\n    gameView.showHandCard(this.activePlayer);\r\n    this.handCardNotUsed = true;\r\n  }\r\n  return this.activePlayer.aliveStatus;\r\n}\r\n\r\n\r\nTurn.prototype.getSecondCard = function (deck, gameView) {\r\n  this.secondCard = deck.drawCard();\r\n  gameView.showDeckCard(this.activePlayer, this.secondCard);\r\n  this.deckCardNotUsed = true;\r\n}\r\n\r\n\r\nTurn.prototype.activateCardChoiceEventListener = function (endOfGoFunctions) {\r\n  const playerNumber = this.playerNumber;\r\n  const handCardImage = document.getElementById(`player${playerNumber}-handCardImage`);\r\n  const deckCardImage = document.getElementById(`player${playerNumber}-deckCardImage`);\r\n\r\n  if ((this.secondCard.character === \"King\" || this.secondCard.character === \"Prince\") && this.activePlayer.card.character === \"Countess\") {\r\n    handCardImage.addEventListener('click', () => { this.handImageHandler(endOfGoFunctions) });\r\n  }\r\n  else if ((this.activePlayer.card.character === \"King\" || this.activePlayer.card.character === \"Prince \") && this.secondCard.character === \"Countess\" ) {\r\n    deckCardImage.addEventListener('click', () => { this.deckImageHandler(endOfGoFunctions) });\r\n  }\r\n  else {\r\n    handCardImage.addEventListener('click', () => {this.handImageHandler(endOfGoFunctions) });\r\n    deckCardImage.addEventListener('click', () => {this.deckImageHandler(endOfGoFunctions) });\r\n  }\r\n}\r\n\r\n\r\nTurn.prototype.handImageHandler = function (endOfGoFunctions) {\r\n  if (this.handCardNotUsed) {\r\n    const playedCard = this.activePlayer.card;\r\n    const cardNumber = playedCard.value;\r\n    const action = this.deck.cardActions[`${cardNumber}`-1];\r\n    this.activePlayer.card = this.secondCard;\r\n    this.secondCard = null;\r\n    this.handCardNotUsed = false;\r\n    this.deckCardNotUsed = false;\r\n    const discardedHandCardImage = document.getElementById(`player${this.activePlayer.playerNumber}-handCardImage`);\r\n    discardedHandCardImage.src = `./images/${this.activePlayer.card.character}.png`;\r\n\r\n    const deckCardImage = document.getElementById(`player${this.activePlayer.playerNumber}-deckCardImage`);\r\n    deckCardImage.src = `./images/blank.png`;\r\n\r\n    action(this.activePlayer, this.gameView, this.playerArray, endOfGoFunctions, this.deck);\r\n  }\r\n}\r\n\r\n\r\nTurn.prototype.deckImageHandler = function (endOfGoFunctions) {\r\n  if (this.deckCardNotUsed) {\r\n    const playedCard = this.secondCard;\r\n    const cardNumber = playedCard.value;\r\n    const action = this.deck.cardActions[`${cardNumber}`-1]\r\n    this.secondCard = null;\r\n    this.handCardNotUsed = false;\r\n    this.deckCardNotUsed = false;\r\n    const discardedDeckCardImage = document.getElementById(`player${this.activePlayer.playerNumber}-deckCardImage`);\r\n    discardedDeckCardImage.src = `./images/blank.png`;\r\n    console.log(\" Playing Player has laid down their deck card:\", playedCard);\r\n    console.log(\" The player is left with a hand card now of:\", this.activePlayer.card);\r\n    action(this.activePlayer, this.gameView, this.playerArray, endOfGoFunctions, this.deck);\r\n  }\r\n}\r\n\r\n\r\nmodule.exports = Turn;\r\n\n\n//# sourceURL=webpack:///./client/src/models/turn.js?");

/***/ }),

/***/ "./client/src/runner.js":
/*!******************************!*\
  !*** ./client/src/runner.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const SetUpHelper = __webpack_require__(/*! ./helpers/setup.js */ \"./client/src/helpers/setup.js\");\r\nconst GameView = __webpack_require__(/*! ./views/game_view.js */ \"./client/src/views/game_view.js\");\r\nconst Player = __webpack_require__(/*! ./models/player.js */ \"./client/src/models/player.js\");\r\nconst Turn = __webpack_require__(/*! ./models/turn.js */ \"./client/src/models/turn.js\");\r\n\r\nlet deck;\r\nlet gameNotWon = true;\r\nlet playerArray = [];\r\nlet gameNotStarted = true;\r\nlet turnCounter = 0;\r\nlet skippedPlayer = 0;\r\nlet playerWon = null;\r\nconst gameView = new GameView();\r\n\r\n\r\nSetUpHelper.setUpDeck((finishedDeck) => {\r\n  deck = finishedDeck;\r\n  deck.removeInitialCard();\r\n});\r\n\r\n\r\nconst handleStartGameButton = function () {\r\n  if (gameNotStarted) {\r\n    playerArray =  SetUpHelper.setUpPlayers(deck, gameView);\r\n    const startNoise = new Audio('./sounds/startPlaying.mp3')\r\n    startNoise.play();\r\n    playRound();\r\n    gameNotStarted = false;\r\n    const startButton = document.getElementById('start-button');\r\n    startButton.style.background = \"rgb(158, 147, 130)\";\r\n    startButton.style.color = \"#614d4d\";\r\n  }\r\n}\r\n\r\n\r\nconst handleGoEndButtonClick = function (event) {\r\n  if (event) {\r\n    gameView.unShowCards(playerArray);\r\n    const goEndButton = document.getElementById(`${event.srcElement.id}`)\r\n    goEndButton.disabled = true;\r\n    goEndButton.style.background = \"rgb(158, 147, 130)\";\r\n\r\n  }\r\n  if (!gameNotWon) { // message here is done in turn logic now\r\n  } else if (deck.noCardsLeft) {\r\n    const numActivePlayersArray = playerArray.filter(player => player.aliveStatus);\r\n    const numActivePlayers = numActivePlayersArray.length;\r\n    const messagebox = document.getElementById('message-box');\r\n    if(numActivePlayers === 1) {\r\n      messagebox.innerHTML = `Congratulations ${numActivePlayersArray[0].name}!!!! </br> You WON!🎉 Everyone else is dead`\r\n      gameView.showHandCard(numActivePlayersArray[0]);\r\n      const wonNoise = new Audio('./sounds/won.mp3')\r\n      wonNoise.play();\r\n    } else {\r\n      let highestCardPlayer = numActivePlayersArray[0];\r\n      let draw = false;\r\n      for(i = 1; i < numActivePlayers; i++){\r\n        if(highestCardPlayer.card.value < numActivePlayersArray[i].card.value){\r\n          highestCardPlayer = numActivePlayersArray[i];\r\n          draw = false;\r\n        }\r\n        else if (highestCardPlayer.card.value === numActivePlayersArray[i].card.value) {\r\n          draw = true;\r\n        }\r\n      }\r\n      if (draw) {\r\n        messagebox.innerHTML = `No cards left in the deck</br> But it was a draw... NO ONE THINKS THIS WILL EVER HAPPEN!! Unicorns exist`;\r\n        const youDrewNoise = new Audio('./sounds/draw.mp3');\r\n        for (const player of numActivePlayersArray) {\r\n          gameView.showHandCard(player);\r\n        }\r\n        youDrawNoise.play();\r\n      } else {\r\n        messagebox.innerHTML = `No cards left in the deck</br> Congratulations ${highestCardPlayer.name}!!!! You WON!🎉 with a ${highestCardPlayer.card.character}`\r\n        for (const player of numActivePlayersArray) {\r\n          gameView.showHandCard(player);\r\n        }\r\n        const wonNoise = new Audio('./sounds/won.mp3')\r\n        wonNoise.play();\r\n      }\r\n    } // end of else\r\n\r\n  } else {\r\n    if (turnCounter < 3) {\r\n      turnCounter += 1;\r\n    } else {\r\n      turnCounter = 0\r\n    };\r\n    setTimeout(playRound, 500)\r\n  };\r\n} // end end-go-button click\r\n\r\n\r\nconst playRound = function () {\r\n  // console.log(\"Round:\", turnCounter,\" kicked off!\");\r\n  const turnLogic = new Turn(playerArray[turnCounter], gameView, deck, playerArray);\r\n\r\n  const numActivePlayersArray = playerArray.filter(player => player.aliveStatus);\r\n  const numActivePlayers = numActivePlayersArray.length;\r\n\r\n  if (numActivePlayers < 2) {\r\n    gameNotWon = false;\r\n    const messagebox = document.getElementById('message-box');\r\n    messagebox.innerHTML = `Congratulations ${numActivePlayersArray[0].name}!!!! </br> You WON!!!! Everyone else is dead`\r\n    handleGoEndButtonClick();\r\n  } else if (turnLogic.playerIsActive(gameView)) {\r\n    turnLogic.getSecondCard(deck, gameView);\r\n    console.log(\"Turn of player:\", turnLogic.activePlayer);\r\n    // console.log(\"Hand card is:\", turnLogic.activePlayer.card.character);\r\n    // console.log(\"Deck card for their go: \", turnLogic.secondCard.character);\r\n\r\n    const endOfGo = function () {\r\n      const goEndButton = document.getElementById('end-go-button');\r\n      goEndButton.style.background = \"rgb(138, 218, 105)\";\r\n      goEndButton.disabled = false;\r\n    }\r\n\r\n    turnLogic.activateCardChoiceEventListener(endOfGo);\r\n    skippedPlayer = 0;\r\n  } else { // auto SKIP PLAYER AS THEY are dead\r\n    handleGoEndButtonClick();\r\n  };\r\n} // end Round\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n  const startButton = document.getElementById('start-button');\r\n  startButton.addEventListener('click', handleStartGameButton)\r\n\r\n  const goEndButton = document.getElementById('end-go-button');\r\n  goEndButton.addEventListener('click', (event) => {handleGoEndButtonClick(event)});\r\n  goEndButton.disabled = true;\r\n});\r\n\r\n\r\n\r\n\r\n// goEndButton.style.hover =\r\n// goEndButton.style.active =\r\n//\r\n// #end-go-button:hover {background-color: rgb(55, 221, 57)}\r\n// #end-go-button:active {\r\n// background-color: rgb(92, 231, 27);\r\n// box-shadow: 1px 2px #666;\r\n// transform: translateY(3px);\r\n// }\r\n\n\n//# sourceURL=webpack:///./client/src/runner.js?");

/***/ }),

/***/ "./client/src/services/request.js":
/*!****************************************!*\
  !*** ./client/src/services/request.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const Request = function (url) {\r\n  this.url = url;\r\n}\r\n\r\nRequest.prototype.get = function(onApiRequestComplete) {\r\n  const request = new XMLHttpRequest();\r\n  request.open('GET', this.url);\r\n  request.addEventListener('load', function () {\r\n    if(this.status !== 200) {\r\n      return;\r\n    }\r\n    const responseBody = JSON.parse(this.responseText);\r\n    onApiRequestComplete(responseBody);\r\n  });\r\n  request.send();\r\n}\r\n\r\n\r\nmodule.exports = Request;\r\n\n\n//# sourceURL=webpack:///./client/src/services/request.js?");

/***/ }),

/***/ "./client/src/views/game_view.js":
/*!***************************************!*\
  !*** ./client/src/views/game_view.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const GameView = function () {\r\n  this.numDiscardedCards = 0;\r\n}\r\n\r\nconst characterMessages = {\r\n  Guard: \"ACTION: Choose a player and guess their card\",\r\n  Priest: \"ACTION: Choose a player whose card you wish to see\",\r\n  Baron: \"ACTION: Choose a player you wish to compare hands with\",\r\n  Handmaid: \"You are protected from other card actions until your next go\",\r\n  Prince: \"ACTION: Choose a player to discard their card\",\r\n  King: \"ACTION: Choose a player you wish to swap cards with\",\r\n  Countess: \"\",\r\n  Princess: \"You are now out of the game!\"\r\n}\r\n\r\nGameView.prototype.getPlayerName = function (playerNumber) {\r\n  const playerNameInput = document.getElementById(`player${playerNumber}-inputName`); //input html box where users can type name\r\n  const playerName = playerNameInput.value;\r\n  const playerNameBox = document.getElementById(`player${playerNumber}-nameBox`) // div that previously contained an input\r\n  playerNameBox.innerHTML = `<h1>${playerName}</h1>`; // change input to title using the name inputted.\r\n  return playerName;\r\n}\r\n\r\nGameView.prototype.renderLayout = function (arrayOfPlayers) {\r\n  // set up the space for cards\r\n  for (i = 1; i <5; i++) {\r\n    const playerHandCardImage = document.getElementById(`player${i}-handCardImage`);\r\n    playerHandCardImage.src = url(\"./client/public/images/lovelettercard.png\")\r\n  }\r\n}\r\n\r\nGameView.prototype.showHandCard = function (player) {\r\n  // Get player number from player then fill container for that player\r\n  console.log(\"showing hand card of player:\", player.playerNumber);\r\n  const imageName = player.card.character;\r\n  setImage(player, \"hand\", imageName);\r\n}\r\n\r\nGameView.prototype.showDeckCard = function (player, secondCard) {\r\n  console.log(\"showing deck cards of player:\", player.playerNumber);\r\n  const imageName = secondCard.character;\r\n  setImage(player, \"deck\", imageName);\r\n}\r\n\r\nGameView.prototype.unShowCards = function (playerArray) {\r\n  // Get player number from player then fill container for that player\r\n  for (const player of playerArray) {\r\n    if (player.aliveStatus) {\r\n      setImage(player, \"hand\", \"lovelettercard\");\r\n    } else {\r\n      setImage(player,\"hand\", \"dead\");\r\n    }\r\n    setImage(player, \"deck\",\"blank\");\r\n  }\r\n}\r\n\r\nGameView.prototype.addToDiscard = function (cardName) {\r\n  const pile = document.getElementById('discard-pile-container');\r\n  const discardedCard = document.createElement('img');\r\n  discardedCard.src = `./images/${cardName}.png`;\r\n  console.log(\"number of cards in discard pile: \", this.numDiscardedCards);\r\n  discardedCard.classList = \"discarded-card\";\r\n  if (!(this.numDiscardedCards === 0)) {\r\n    const yShift = (this.numDiscardedCards * 280 * (-1));\r\n    console.log(yShift);\r\n    discardedCard.style.transform = `translateY(${yShift}px)`;\r\n    console.log(discardedCard.style);\r\n  }\r\n  pile.appendChild(discardedCard);\r\n\r\n  this.numDiscardedCards += 1;\r\n}\r\n\r\nGameView.prototype.askForPlayerChoicePrincess = function (holderPlayer, playerArray, endOfGoFunctions) {\r\n  this.addToDiscard(\"princess\");\r\n  this.addToDiscard(`${holderPlayer.card.character}`);\r\n  setTextInMessageBoxUponCardClick(\"Princess\");\r\n  holderPlayer.aliveStatus = false;\r\n  this.unShowCards(playerArray);\r\n  endOfGoFunctions();\r\n}\r\n\r\n\r\nGameView.prototype.askForPlayerChoiceCountess = function (holderPlayer, playerArray, endOfGoFunctions) {\r\n  this.addToDiscard(\"countess\");\r\n  setTextInMessageBoxUponCardClick(\"Countess\");\r\n  endOfGoFunctions();\r\n}\r\n\r\n\r\nGameView.prototype.askForPlayerChoiceKing = function (holderPlayer, playerArray, endOfGoFunctions) {\r\n  this.addToDiscard(\"king\");\r\n  let activePlayersNonProtected = [];\r\n  for (const player of playerArray){\r\n    if (!player.protected  && player.aliveStatus ) {\r\n      activePlayersNonProtected.push(player);\r\n    }\r\n  }\r\n  if (activePlayersNonProtected.length === 1)  {\r\n    setBespokeTextInMessageBox(`You can't choose any other players </br> All other players are either protected by the Handmaid or no longer active this round`);\r\n    endOfGoFunctions();\r\n  } else {\r\n    setTextInMessageBoxUponCardClick(\"King\");\r\n    const playerChoiceSelector = setUpPlayerDropDown(holderPlayer, playerArray, false, endOfGoFunctions);\r\n    submitChoice = setUpSubmitButton();\r\n\r\n    submitChoice.addEventListener('click', () => {\r\n      const chosenPlayer = getChosenPlayer(playerChoiceSelector, playerArray);\r\n      setBespokeTextInMessageBox(`You choose to swap cards with ${chosenPlayer.name} </br>Your new card is ${chosenPlayer.card.character}`);\r\n      removeOptionsAfterTurn(playerChoiceSelector, submitChoice);\r\n\r\n      const holderPlayerCard = holderPlayer.card;\r\n      const chosenPlayerCard = chosenPlayer.card;\r\n      holderPlayer.card = chosenPlayerCard;\r\n      chosenPlayer.card = holderPlayerCard;\r\n\r\n      const chosenPlayerNewCardImageName = chosenPlayer.card.character;\r\n      setImage(chosenPlayer, \"hand\", chosenPlayerNewCardImageName);\r\n      const holderPlayerNewCardImageName = holderPlayer.card.character\r\n      setImage(holderPlayer, \"hand\", holderPlayerNewCardImageName);\r\n      setImage(holderPlayer,\"deck\",\"blank\");\r\n      endOfGoFunctions();\r\n    });\r\n  }\r\n}\r\n\r\n\r\nGameView.prototype.askForPlayerChoicePrince = function (holderPlayer, playerArray, endOfGoFunctions, deck) {\r\n  this.addToDiscard(\"prince\");\r\n  let activePlayersNonProtected = [];\r\n  for (const player of playerArray){\r\n    if (!player.protected && player.aliveStatus) {\r\n      activePlayersNonProtected.push(player);\r\n    }\r\n  }\r\n  if (activePlayersNonProtected.length === 1)  {\r\n    setBespokeTextInMessageBox(`You can't choose anyother players </br> All other players are either protected by the Handmaid or no longer active this round`);\r\n    endOfGoFunctions();\r\n  } else {\r\n    setTextInMessageBoxUponCardClick(\"Prince\");\r\n    const playerChoiceSelector = setUpPlayerDropDown(holderPlayer, playerArray, true, endOfGoFunctions);\r\n    submitChoice = setUpSubmitButton();\r\n\r\n    submitChoice.addEventListener('click', () => {\r\n      const chosenPlayer = getChosenPlayer(playerChoiceSelector, playerArray);\r\n      setBespokeTextInMessageBox(`You chose to make ${chosenPlayer.name} discard their card`);\r\n      removeOptionsAfterTurn(playerChoiceSelector, submitChoice);\r\n      this.addToDiscard(`${chosenPlayer.card.character.toLowerCase()}`);\r\n      if (chosenPlayer.card.character === \"Princess\") {\r\n        chosenPlayer.aliveStatus = false;\r\n        setBespokeTextInMessageBox(`You chose to make ${chosenPlayer.name} discard their card </br> They had the Princess so they are now dead!`);\r\n      } else {\r\n        if(!deck.noCardsLeft){\r\n          chosenPlayer.card = deck.drawCard();\r\n        } else {\r\n          chosenPlayer.card = deck.initialRemovedCard;\r\n        }\r\n        const imageName = holderPlayer.card.character;\r\n        setImage(holderPlayer,\"hand\", imageName);\r\n      } // end else\r\n      endOfGoFunctions();\r\n    }); // end event listener\r\n  }\r\n}\r\n\r\n\r\nGameView.prototype.askForPlayerChoiceHandmaid = function (holderPlayer, playerArray, endOfGoFunctions) {\r\n  this.addToDiscard(\"handmaid\");\r\n  setTextInMessageBoxUponCardClick(\"Handmaid\");\r\n  holderPlayer.protected = true;\r\n  endOfGoFunctions();\r\n}\r\n\r\n\r\nGameView.prototype.askForPlayerChoiceBaron = function (holderPlayer, playerArray, endOfGoFunctions) {\r\n  this.addToDiscard(\"baron\");\r\n  let activePlayersNonProtected = [];\r\n  for (const player of playerArray){\r\n    if (!player.protected && player.aliveStatus) {\r\n      activePlayersNonProtected.push(player);\r\n    }\r\n  }\r\n  if (activePlayersNonProtected.length === 1) {\r\n    setBespokeTextInMessageBox(`You can't choose anyother players </br> All other players are either protected by the Handmaid or no longer active this round`);\r\n    endOfGoFunctions();\r\n  } else {\r\n  setTextInMessageBoxUponCardClick(\"Baron\");\r\n  const playerChoiceSelector = setUpPlayerDropDown(holderPlayer, playerArray, false, endOfGoFunctions);\r\n  submitChoice = setUpSubmitButton();\r\n  submitChoice.addEventListener('click', () => {\r\n    const chosenPlayer = getChosenPlayer(playerChoiceSelector, playerArray);\r\n    // Note: line below never appears as too quick\r\n    setBespokeTextInMessageBox(`You chose to compare cards with ${chosenPlayer.name}</br>Their card is ${chosenPlayer.card.character}`);\r\n    removeOptionsAfterTurn(playerChoiceSelector, submitChoice);\r\n    this.showHandCard(chosenPlayer);\r\n    if(chosenPlayer.card.value < holderPlayer.card.value) {\r\n      chosenPlayer.aliveStatus = false;\r\n      setBespokeTextInMessageBox(`Your card is higher than ${chosenPlayer.name}'s ${chosenPlayer.card.character} - ${chosenPlayer.name} dies!`);\r\n\r\n      const imageName = chosenPlayer.card.character;\r\n      this.addToDiscard(chosenPlayer.card.character);\r\n      setImage(chosenPlayer,\"hand\",\"blank\");\r\n    } else if (chosenPlayer.card.value > holderPlayer.card.value) {\r\n      holderPlayer.aliveStatus = false;\r\n      setBespokeTextInMessageBox(`Your card is lower than ${chosenPlayer.name}'s ${chosenPlayer.card.character} - you die!`);\r\n\r\n      const imageName = holderPlayer.card.character;\r\n      this.addToDiscard(holderPlayer.card.character);\r\n      setImage(holderPlayer,\"hand\",\"blank\");\r\n    } else {\r\n      setBespokeTextInMessageBox(`You both have the same valued card - no one dies`);\r\n    }\r\n    endOfGoFunctions();\r\n  });\r\n}\r\n}\r\n\r\n\r\nGameView.prototype.askForPlayerChoicePriest = function (holderPlayer, playerArray, endOfGoFunctions) {\r\n  this.addToDiscard(\"priest\");\r\n  let activePlayersNonProtected = [];\r\n  for (const player of playerArray){\r\n    if (!player.protected && player.aliveStatus) {\r\n      activePlayersNonProtected.push(player);\r\n    }\r\n  }\r\n  if (activePlayersNonProtected.length === 1)  {\r\n    setBespokeTextInMessageBox(`You can't choose anyother players </br> All other players are either protected by the Handmaid or no longer active this round`);\r\n    endOfGoFunctions();\r\n  } else {\r\n    setTextInMessageBoxUponCardClick(\"Priest\");\r\n    const playerChoiceSelector = setUpPlayerDropDown(holderPlayer, playerArray, false, endOfGoFunctions);\r\n    submitChoice = setUpSubmitButton();\r\n    submitChoice.addEventListener('click', () => {\r\n      const chosenPlayer = getChosenPlayer(playerChoiceSelector, playerArray);\r\n      setBespokeTextInMessageBox(`You choose to see card of \"${chosenPlayer.name}\" </br>Their card is ${chosenPlayer.card.character}`)\r\n      removeOptionsAfterTurn(playerChoiceSelector, submitChoice);\r\n      this.showHandCard(chosenPlayer);\r\n      endOfGoFunctions();\r\n    });\r\n  }\r\n}\r\n\r\n\r\nGameView.prototype.askForPlayerChoiceGuard = function (holderPlayer, playerArray, endOfGoFunctions) {\r\n  this.addToDiscard(\"guard\");\r\n  let activePlayersNonProtected = [];\r\n  for (const player of playerArray){\r\n    if (!player.protected && player.aliveStatus) {\r\n      activePlayersNonProtected.push(player);\r\n    }\r\n  }\r\n  if (activePlayersNonProtected.length === 1) {\r\n    setBespokeTextInMessageBox(`You can't choose anyother players </br> All other players are either protected by the Handmaid or no longer active this round`);\r\n    endOfGoFunctions();\r\n  }\r\n  else {\r\n    setTextInMessageBoxUponCardClick(\"Guard\");\r\n    const playerChoiceSelector = setUpPlayerDropDown(holderPlayer, playerArray, false, endOfGoFunctions);\r\n    const cardChoiceSelector = setUpCardDropDown()\r\n    submitChoice = setUpSubmitButton();\r\n    submitChoice.addEventListener('click', () => {\r\n      const chosenPlayer = getChosenPlayer(playerChoiceSelector, playerArray);\r\n      if (chosenPlayer.card.character === cardChoiceSelector.value){\r\n        chosenPlayer.aliveStatus = false;\r\n        setBespokeTextInMessageBox(`Correct! You guessed ${chosenPlayer.name} had a ${cardChoiceSelector.value},</br>${chosenPlayer.name} is out of the game!`);\r\n        this.addToDiscard(`${chosenPlayer.card.character}`);\r\n      } else {\r\n        setBespokeTextInMessageBox(`Wrong! ${chosenPlayer.name} does not have a ${cardChoiceSelector.value}`);\r\n      }\r\n      removeOptionsAfterTurn(playerChoiceSelector, submitChoice, cardChoiceSelector);\r\n      endOfGoFunctions();\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n// START OF HELPER FUNCTIONS\r\n// (Think these could be refactored further)\r\n\r\nconst setImage = function(player, handOrDeck, imageName) {\r\n  const playerNumber = player.playerNumber;\r\n  const image = document.getElementById(`player${playerNumber}-${handOrDeck}CardImage`);\r\n  image.src = `./images/${imageName}.png`\r\n}\r\n\r\n\r\nconst setTextInMessageBoxUponCardClick = function(character) {\r\n  const messagebox = document.getElementById(\"message-box\");\r\n  messagebox.innerHTML = `You played the ${character} card </br> ${characterMessages[character]}`\r\n}\r\n\r\n\r\nconst setBespokeTextInMessageBox = function(text) {\r\n  const messagebox = document.getElementById(\"message-box\");\r\n  messagebox.innerHTML = text;\r\n}\r\n\r\n\r\nconst setUpPlayerDropDown = function(holderPlayer, playerArray, isAPrince, endOfGoFunctions) {\r\n  const playerChoiceSelector = document.createElement('select');\r\n  playerChoiceSelector.classList = \"control-item\";\r\n  playerChoiceSelector.id = \"player-select\";\r\n  let playerOptions = [];\r\n  if(isAPrince) {\r\n    for (const player of playerArray){\r\n      if(player.aliveStatus && !player.protected) {\r\n        playerOptions.push(player);\r\n      } else { }\r\n    }\r\n    for (const player of playerOptions) {\r\n      const option = document.createElement('option');\r\n      option.classList = \"control-item\";\r\n      option.textContent = player.name;\r\n      option.value = JSON.stringify(player);\r\n      playerChoiceSelector.appendChild(option);\r\n    }\r\n    const controlBox = document.getElementById('controls');\r\n    controlBox.appendChild(playerChoiceSelector);\r\n  } else {\r\n    for (const player of playerArray){\r\n      if(player !== holderPlayer && player.aliveStatus && !player.protected) {\r\n        playerOptions.push(player);\r\n      } else { }\r\n    }\r\n    if (playerOptions.length === 0) {\r\n      setBespokeTextInMessageBox(`You can't choose anyother players </br> All other players are either protected by the Handmaid or no longer active this round`);\r\n\r\n      endOfGoFunctions();\r\n    }\r\n    else {\r\n      for (const player of playerOptions) {\r\n        const option = document.createElement('option');\r\n        option.classList = \"control-item\";\r\n        option.textContent = player.name;\r\n        option.value = JSON.stringify(player);\r\n        playerChoiceSelector.appendChild(option);\r\n      }\r\n      const controlBox = document.getElementById('controls');\r\n      controlBox.appendChild(playerChoiceSelector);\r\n    }\r\n  }\r\n  return playerChoiceSelector;\r\n}\r\n\r\n\r\nconst setUpCardDropDown = function() {\r\n  const cardChoiceSelector = document.createElement('select');\r\n  cardChoiceSelector.classList = \"control-item\";\r\n  cardChoiceSelector.id = \"card-select\";\r\n  for (let i = 2; i < 9; i++) {\r\n    const optionCharacter = document.createElement('option');\r\n    switch (i){\r\n      case 2:\r\n      optionCharacter.textContent = 'Priest';\r\n      optionCharacter.value = 'Priest';\r\n      break;\r\n      case 3:\r\n      optionCharacter.textContent = 'Baron';\r\n      optionCharacter.value = 'Baron';\r\n      break;\r\n      case 4:\r\n      optionCharacter.textContent = 'Handmaid';\r\n      optionCharacter.value = 'Handmaid';\r\n      break;\r\n      case 5:\r\n      optionCharacter.textContent = 'Prince';\r\n      optionCharacter.value = 'Prince';\r\n      break;\r\n      case 6:\r\n      optionCharacter.textContent = 'King';\r\n      optionCharacter.value = 'King';\r\n      break;\r\n      case 7:\r\n      optionCharacter.textContent = 'Countess';\r\n      optionCharacter.value = 'Countess';\r\n      break;\r\n      case 8:\r\n      optionCharacter.textContent = 'Princess';\r\n      optionCharacter.value = 'Princess';\r\n      break;\r\n    }\r\n    cardChoiceSelector.appendChild(optionCharacter);\r\n  }\r\n  const controlBox = document.getElementById('controls');\r\n  controlBox.appendChild(cardChoiceSelector);\r\n  return cardChoiceSelector;\r\n}\r\n\r\n\r\nconst setUpSubmitButton = function() {\r\n  const submitChoice = document.createElement('button');\r\n  submitChoice.classList = \"control-item\";\r\n  submitChoice.id = \"player-submit-button\";\r\n  submitChoice.textContent = \"Submit Player Choice!\"\r\n  const controlBox = document.getElementById('controls');\r\n  controlBox.appendChild(submitChoice);\r\n  return submitChoice;\r\n}\r\n\r\n\r\nconst removeOptionsAfterTurn = function(playerChoiceSelector,submitChoice,  cardChoiceSelector) {\r\n  const controlBox = document.getElementById('controls');\r\n  controlBox.removeChild(playerChoiceSelector);\r\n  controlBox.removeChild(submitChoice);\r\n  if(cardChoiceSelector) {\r\n    controlBox.removeChild(cardChoiceSelector);\r\n  }\r\n}\r\n\r\n\r\nconst getChosenPlayer = function(playerChoiceSelector, playerArray) {\r\n  const chosenPlayerNumber =  JSON.parse(playerChoiceSelector.value).playerNumber;\r\n  const chosenPlayer = playerArray[chosenPlayerNumber -1];\r\n  return chosenPlayer;\r\n}\r\n\r\n// END OF HELPER FUNCTIONS\r\n\r\n\r\nmodule.exports = GameView;\r\n\n\n//# sourceURL=webpack:///./client/src/views/game_view.js?");

/***/ })

/******/ });